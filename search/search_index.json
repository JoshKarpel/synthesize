{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Synthesize","text":"<p>Synthesize is a tool for managing long-lived development workflows that involve multiple tools executing concurrently, each of which might have bespoke conditions around when and how it needs to be run or re-run.</p> <p>In Synthesize, a flow is a graph (potentially disjoint) of nodes, each of which runs a target whenever one of that node's triggers activates. Synthesize has a wide variety of triggers:</p> <ul> <li>Target <code>B</code> should run after target <code>A</code> runs.</li> <li>Target <code>W</code> should run every time file <code>F</code> changes.</li> <li>Target <code>R</code> should be restarted if it ever exits.</li> <li>Target <code>O</code> should run once when the flow starts.</li> </ul> <p>These can all coexist as part of same flow, and can even be combined for a single target, allowing for complex nodes like \"restart target <code>W</code> if it exits or if file <code>F</code> changes\".</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Target and trigger definitions can be factored out and shared across multiple nodes and flows.</li> <li>Targets are just shell commands, so you can use any tools you'd like. Synthesize works with your existing tools, it doesn't replace them.</li> <li>Targets can be parameterized with arguments (each target is actually a Jinja template) and environment variables.   Arguments and environment variables can also be provided at the flow and target levels (most specific wins).</li> <li>Nodes can have multiple triggers, allowing you to express complex triggering conditions.</li> <li>All command output is combined in a single output stream, with each node's output prefixed with a timestamp and its name.</li> <li>The current time and the status of each node is displayed at the bottom of your terminal.</li> <li>You can generate Mermaid diagrams of your flows for debugging and documentation.</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>As an example, here is Synthesize's own <code>synth.yaml</code> configuration file:</p> <pre><code>flows:\n  default:\n    nodes:\n      tests:\n        target: tests\n        triggers:\n        - code-changes\n      types:\n        target: types\n        triggers:\n        - code-changes\n      docs:\n        target: docs\n        triggers:\n        - delay: 1\n        - watch: [\"docs/hooks/\"]\n\ntargets:\n  tests:\n    commands: |\n      pytest -vv --cov\n\n  types:\n    commands: |\n      mypy\n\n  docs:\n    commands: |\n      mkdocs serve --strict\n\ntriggers:\n  code-changes:\n    watch:\n    - src/\n    - tests/\n    - docs/examples/\n    - docs/hooks/\n    - pyproject.toml\n    - .coveragerc\n</code></pre> <pre><code>flowchart TD\n  tests(tests)\n  w_bb19edcd7b45bfcfbfcab4096798a339f9610617[(\"src/\ntests/\ndocs/examples/\ndocs/hooks/\npyproject.toml\n.coveragerc\")]\n  w_bb19edcd7b45bfcfbfcab4096798a339f9610617 --&gt;|\ud83d\udc41| tests\n  types(types)\n  w_bb19edcd7b45bfcfbfcab4096798a339f9610617 --&gt;|\ud83d\udc41| types\n  docs(docs)\n  docs --&gt;|\u221e 1s| docs\n  w_f8192994ea74c4d2311ffd6eb936c7c30e96617f[(\"docs/hooks/\")]\n  w_f8192994ea74c4d2311ffd6eb936c7c30e96617f --&gt;|\ud83d\udc41| docs\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Synthesize is available on PyPI.</p> <p>We recommend installing Synthesize via <code>pipx</code>:</p> <pre><code>pipx install synthesize\n</code></pre> <p>Then run <pre><code>synth --help\n</code></pre> to get started.</p> <p>Synthesize does not work on Windows</p> <p>We recommend using the Windows Subsystem for Linux (WSL) to run Synthesize on Windows.</p>"},{"location":"#inspirations","title":"Inspirations","text":"<ul> <li><code>concurrently</code></li> <li><code>make</code></li> <li><code>just</code></li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#006","title":"<code>0.0.6</code>","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>#126   If no more work can be done in a flow, <code>synth</code> will exit.   If all targets ran and succeeded, the exit code will be <code>0</code>.   Otherwise, the exit code will be <code>1</code>.</li> <li>#126   Added the <code>--once</code> option, which replaces all \"repeating\" triggers (like <code>watch</code> or <code>restart</code>) with <code>once</code>.   This allows an existing flow to be run as a \"single shot\",   and when combined with the exit behavior change described above   potentially useful for using Snyth workflows in CI or other automation.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>#128   The separator rule is now red when any node has failed,   and a status summary is printed when exiting.</li> <li>#131   Flows can no longer have cycles in them (via the <code>after</code> trigger).</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>#129   Ensured that the async tasks that trigger restarts don't get garbage-collected.</li> </ul>"},{"location":"changelog/#005","title":"<code>0.0.5</code>","text":"<p>Released <code>2025-02-12</code></p>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>#112   Fix a crash that could happen when a process outputs too much data without a newline.</li> </ul>"},{"location":"changelog/#004","title":"<code>0.0.4</code>","text":"<p>Released <code>2024-10-24</code></p>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>#79   Fix a crash that could happen when a process exits while we are trying to terminate it.</li> </ul>"},{"location":"changelog/#003","title":"<code>0.0.3</code>","text":"<p>Released <code>2024-07-07</code></p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>#3 Added PyPI classifiers and other metadata.</li> <li>#33 #40   Allow injecting arguments   (via Jinja2 templates)   and environment variables into target commands.   Arguments and environment variables can be specified at either   the flow, node, or target level, with the most specific taking precedence.</li> <li>#43   Mermaid diagrams can be generated for a flow using the <code>--mermaid</code> option.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>#30   Reorganized configuration to separate targets,   triggers (formerly \"lifecycles\"),   and flows (graphs of targets and triggers).\"</li> <li>#41   Execution duration is printed in the completion message.</li> <li>#49   Flow nodes can now have multiple triggers.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>#45 <code>Restart</code> triggers now allow for the node's children to run again after the node completes.</li> </ul>"},{"location":"changelog/#002","title":"<code>0.0.2</code>","text":"<p>Released <code>2023-02-12</code></p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>#1 Core graph-of-targets data model and executor, with support for <code>once</code>, <code>restart</code>, and <code>watch</code> lifecycles.</li> <li>#1 Support for YAML configuration files.</li> </ul>"},{"location":"config/","title":"Config","text":"<ul> <li>Config object <ul> <li><code>flows</code> object  (Default: <code>{}</code>)  \u25cb A mapping of IDs to flows.</li> <li><code>targets</code> object  (Default: <code>{}</code>)  \u25cb A mapping of IDs to targets.</li> <li><code>triggers</code> object  (Default: <code>{}</code>)  \u25cb A mapping of IDs to triggers.</li> </ul> </li> </ul>"},{"location":"flows/","title":"Flows","text":"<ul> <li> <p>Flow object </p> <ul> <li><code>nodes</code> object  (Default: <code>{}</code>)  \u25cb Mapping of IDs to nodes.</li> <li><code>args</code> object  (Default: <code>{}</code>)  \u25cb Template arguments to apply to all nodes in this flow.</li> <li><code>envs</code> object  (Default: <code>{}</code>)  \u25cb Environment variables to apply to all nodes in this flow.</li> </ul> </li> <li> <p>Node object </p> <ul> <li><code>target</code> Target | string \u25cb The target to run for this node. It may either be the name of a pre-defined target, or a full target definition.</li> <li><code>args</code> object  (Default: <code>{}</code>)  \u25cb Template arguments to apply to this node.</li> <li><code>envs</code> object  (Default: <code>{}</code>)  \u25cb Environment variables to apply to this node.</li> <li><code>triggers</code> array[Once | After | Restart | Watch | string] \u25cb The list of triggers for this node. Each trigger may be the name of a pre-defined trigger, or a full trigger definition.</li> <li><code>color</code> string  (Default: <code>None</code>)  \u25cb The color that will be used to help differentiate this node from others.</li> </ul> </li> </ul>"},{"location":"targets/","title":"Targets","text":"<ul> <li>Target object <ul> <li><code>commands</code> string  (Default: <code>''</code>)  \u25cb The commands to run for this target.</li> <li><code>args</code> object  (Default: <code>{}</code>)  \u25cb Template arguments to apply to this target by default.</li> <li><code>envs</code> object  (Default: <code>{}</code>)  \u25cb Environment variables to apply to this target by default.</li> <li><code>executable</code> string  (Default: <code>'sh -eu'</code>)  \u25cb The executable to run this target with.</li> </ul> </li> </ul>"},{"location":"triggers/","title":"Triggers","text":""},{"location":"triggers/#trigger-types","title":"Trigger Types","text":""},{"location":"triggers/#once","title":"Once","text":"<p>\"Once\" triggers run the node just one time during the flow. This is the default trigger, so it does not need to be specified.</p> <p>Use this trigger when a command needs to run only one time during a flow.</p> <pre><code>flows:\n  default:\n    nodes:\n      A:\n        target: sleep-and-echo\n      B:\n        target: sleep-and-echo\n      C:\n        target: sleep-and-echo\n\ntargets:\n  sleep-and-echo:\n    commands: |\n      sleep 1\n      echo \"Hi from {{ id }}!\"\n</code></pre> <pre><code>flowchart TD\n  A(A)\n  B(B)\n  C(C)\n</code></pre>"},{"location":"triggers/#after","title":"After","text":"<p>\"After\" triggers run the node after some other nodes have completed.</p> <p>Use this trigger when a node depends on the output of another node.</p> <ul> <li>After object <ul> <li><code>after</code> array[string] \u25cb The IDs of the nodes to wait for.</li> </ul> </li> </ul> <pre><code>flows:\n  default:\n    nodes:\n      A:\n        target: sleep-and-echo\n      B:\n        target: sleep-and-echo\n      C:\n        target: sleep-and-echo\n      D:\n        target: sleep-and-echo\n        triggers:\n        - after: [A, B]\n      E:\n        target: sleep-and-echo\n        triggers:\n        - after: [C]\n      F:\n        target: sleep-and-echo\n        triggers:\n        - after: [D, E]\n\ntargets:\n  sleep-and-echo:\n    commands: |\n      sleep 1\n      echo \"Hi from {{ id }}!\"\n</code></pre> <pre><code>flowchart TD\n  A(A)\n  B(B)\n  C(C)\n  D(D)\n  A --&gt; D\n  B --&gt; D\n  E(E)\n  C --&gt; E\n  F(F)\n  D --&gt; F\n  E --&gt; F\n</code></pre>"},{"location":"triggers/#restart","title":"Restart","text":"<p>\"Restart\" triggers run the node every time the node is completed.</p> <p>Use this trigger when you want to keep the node's command running.</p> <ul> <li>Restart object <ul> <li><code>delay</code> number  (Default: <code>1</code>)  \u25cb The delay before restarting the command after it exits.</li> </ul> </li> </ul> <pre><code>flows:\n  default:\n    nodes:\n      A:\n        target: sleep-and-echo\n        triggers:\n        - delay: 3\n      B:\n        target: sleep-and-echo\n        triggers:\n        - delay: 1\n\ntargets:\n  sleep-and-echo:\n    commands: |\n      sleep 1\n      echo \"Hi from {{ id }}!\"\n</code></pre> <pre><code>flowchart TD\n  A(A)\n  A --&gt;|\u221e 3s| A\n  B(B)\n  B --&gt;|\u221e 1s| B\n</code></pre>"},{"location":"triggers/#watch","title":"Watch","text":"<p>\"Watch\" triggers run the node every time one of the watched files changes (directories are watched recursively).</p> <p>Use this trigger to run a node in reaction to changes in the filesystem.</p> <ul> <li>Watch object <ul> <li><code>watch</code> array[string] \u25cb The paths to watch for changes. Directories are watched recursively.</li> </ul> </li> </ul> <pre><code>flows:\n  default:\n    nodes:\n      A:\n        target: sleep-and-echo\n        triggers:\n        - watch: [\"src/\", \"tests/\"]\n      B:\n        target: sleep-and-echo\n        triggers:\n        - watch: [ \"docs/\" ]\n\ntargets:\n  sleep-and-echo:\n    commands: |\n      sleep 1\n      echo \"Hi from {{ id }}!\"\n</code></pre> <pre><code>flowchart TD\n  A(A)\n  w_ff11e363cb730a43a50acf1954da02f688ef403a[(\"src/\ntests/\")]\n  w_ff11e363cb730a43a50acf1954da02f688ef403a --&gt;|\ud83d\udc41| A\n  B(B)\n  w_8727e37cfc0902f9de8dbb42bad04ecc6fe90a31[(\"docs/\")]\n  w_8727e37cfc0902f9de8dbb42bad04ecc6fe90a31 --&gt;|\ud83d\udc41| B\n</code></pre>"},{"location":"triggers/#using-multiple-triggers","title":"Using Multiple Triggers","text":""},{"location":"triggers/#example-restarting-on-completion-or-config-changes","title":"Example: Restarting on Completion or Config Changes","text":"<p>Synthesize uses <code>mkdocs</code> for documentation. <code>mkdocs</code> comes with a built-in command <code>mkdocs serve</code> to watch for configuration and documentation changes and rebuild the site in response, but it doesn't automatically restart the whole process when hooks are changed. Since hooks are imported Python code, the <code>mkdocs</code> process needs to be restarted when they change in order to pick up changes to them.</p> <p>However, if the hooks (or any other configuration) are malformed, <code>mkdocs</code> will exit with an error on startup. If we were just running <code>mkdocs serve</code> by hand on the command line, we would have to manually restart it every time we changed the hooks, potentially multiple times if we are debugging.</p> <p>To get a hands-off developer flow to enable fast iteration cycles, we want the following things to all happen:</p> <ul> <li>If <code>mkdocs</code> exits (for any reason), restart it.</li> <li>If any of the hook files changes, restart <code>mkdocs</code>.</li> <li>If neither of those happen, let <code>mkdocs serve</code> keep running forever.</li> </ul> <p>This is straightforward to express with Synthesize by using both restart and watch triggers for a target that run <code>mkdocs serve</code> (which blocks):</p> <pre><code>flows:\n  default:\n    nodes:\n      docs:\n        target:\n          commands: mkdocs serve --strict\n        triggers:\n        - delay: 1\n        - watch: [\"docs/hooks/\"]\n</code></pre> <pre><code>flowchart TD\n  docs(docs)\n  docs --&gt;|\u221e 1s| docs\n  w_f8192994ea74c4d2311ffd6eb936c7c30e96617f[(\"docs/hooks/\")]\n  w_f8192994ea74c4d2311ffd6eb936c7c30e96617f --&gt;|\ud83d\udc41| docs\n</code></pre>"}]}